config:
  target: '{{ $env.GRAPHQL_HOST }}'
  processor: "./hooks-config.js"
  defaults:
      headers:
        x-hasura-ddn-token: '{{ $env.DDN_TOKEN }}'
        # Auth-Token: ${AuthTOKEN}
        # x-hasura-admin-secret: "WBUwzIiW1nK86lW"
        # add additional header (if any)
  phases:
    - duration: 60
      arrivalRate: 2
      rampTo: 5
      name: Warm up phase
    # - duration: 30
    #   arrivalRate: 5
    #   rampTo: 10
    #   name: Ramp up load

  plugins:
    metrics-by-endpoint:
      useOnlyRequestNames: true
      metricsNamespace: operation

  # publish-metrics:
  # - type: prometheus
  #   pushgateway: "http://143.198.129.138:9091"
  #   tags:
  #     - "testId: testName"
  #     - "type:loadtest"
  #   ssl: false

  expect: 
    - statusCode: 200
  http:
    timeout: 15000
  reportFailuresAsErrors: true
  outputFormat: json

scenarios:
  - name: 'Create and fetch messages flow'
    flow:
      - post:
          url: '/graphql'
          json:
            query: |
                query GetMovieQuery {
                  public_movies(limit: 3) {
                    director
                    released_year
                    series_title
                  }
                }
          afterResponse: "checkGraphQLResponse"
  # - name: 'invalid query'
  #   flow:
  #     - post:
  #         url: '/graphql'
  #         json:
  #           query: |
  #               query GetMovieQuery {
  #                 public_movies(limit: 3) {
  #                   director
  #                   released_year
  #                   series_titl
  #                 }
  #               }
  #         afterResponse: "checkGraphQLResponse"
  # - name: 'token jwt false'
  #   flow:
  #     - post:
  #         url: '/graphql'
  #         headers:
  #           x-hasura-ddn-token: ""
  #         json:
  #           query: |
  #               query GetMovieQuery {
  #                 public_movies(limit: 3) {
  #                   director
  #                   released_year
  #                   series_title
  #                 }
  #               }
  #         afterResponse: "checkGraphQLResponse"